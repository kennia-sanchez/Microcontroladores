//
//  Ejercicio_2.asm
//  Elabora un programa con 3 contadores: contador Gray, contador de números impares y contador
//  de números pares. El programa inicia esperando a que se seleccione una rutina (B1, B2 o B3), cuando
//  se activa dicha rutina, para salir o cambiar de rutina debe presionarse el botón de la rutina deseada.
//  Kennia J. Sánchez Castillo 
//
    Radix	Dec		    // Selecionar decimal como base numerica
    Processor	18F45K50	    // Selecionar procesador a utilizar
    #include	"pic18f45k50.inc"   // Incluir librerias de PIC18F45K50
    
//
//  Memory Allocation
//
    PSECT resetVec, class=CODE, reloc=2, abs
    org	0			    // Ir al espacio de memoria 0 para comenzar
//
// Reset Vector
//
resetVec:
    org	    32			    // Guardar programa desde el espacio de memoria 0020
    VARA    equ	1
    VARB    equ	2
    NUM	    equ	3
    goto    Start		    // Saltar a seccion de Start

Start:
    movlb 15
    clrf TRISB,A
    clrf TRISA,A
    setf TRISC,A
    clrf LATB,A
    clrf LATA,A
    clrf VARA,A
    clrf VARB,A
    clrf NUM,A
    bcf ANSELC,2,1
    bcf ANSELC,6,1			    // Aumentar
    bcf ANSELC,7,1			    // Disminuir
    
Loop:
   // btfss PORTC,0,A			    // Checar si el PORTC esta presionado
	//call Case_A
    btfss PORTC,1,A			    // Checar si el PORTC esta presionado
	call Case_B
    btfss PORTC,2,A			    // Checar si el PORTC esta presionado
	call Case_C
	
    btg LATB,7,A			    // Hace que parpadee el LED
    call Delay_1s
    bra Loop    

/*Case_A:
    bsf LATA,7,A
    call Debounce_20ms
    btfss PORTC,0,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Case_A
*/
    
Case_B:					    // IMPAR
    bsf LATA,6,A
    call Debounce_20ms
    btfss PORTC,1,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Case_B
	clrf LATB,A
	movlw 1
	movwf NUM,A
	
Mas_Menos_B:
    btfss PORTC,6,A
	call Aumentar_B
	
    btfss PORTC,7,A
	call Disminuir_B
	bra Mas_Menos_B
	
Aumentar_B:
    btg LATA,4,A
    call Debounce_20ms
    btfss PORTC,6,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Aumentar_B
	
Mas_B:
    movlw 2
    addwf NUM,1,0
    movff NUM, LATB
    
Salida_Mas_B:
    btg LATA,5,A
    btfsc PORTC,1,A
	goto Mas_Menos_B
	clrf LATB,A
	clrf LATA,A
	return
    
Disminuir_B:
    btg LATA,5,A
    call Debounce_20ms
    btfss PORTC,7,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Disminuir_B
	
Menos_B:
    movlw 2
    subwf NUM,1,0
    movff NUM, LATB
	
Salida_Menos_B:
    btfsc PORTC,1,A
	bra Mas_Menos_B
	clrf LATB,A
	clrf LATA,A
	return
	
Case_C:					    // PAR
    bsf LATA,7,A
    call Debounce_20ms
    btfss PORTC,2,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Case_C
	clrf LATB,A
	
Mas_Menos_C:
    btfss PORTC,6,A
	call Aumentar_C
	
    btfss PORTC,7,A
	call Disminuir_C
	bra Mas_Menos_C
	
Aumentar_C:
    btg LATA,4,A
    call Debounce_20ms
    btfss PORTC,6,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Aumentar_C
	
Mas_C:
    movlw 2
    addwf NUM,1,0
    movff NUM, LATB
    
Salida_Mas_C:
    btfsc PORTC,2,A
	bra Mas_Menos_C
	clrf LATB,A
	clrf LATA,A
	return
    
Disminuir_C:
    btg LATA,5,A
    call Debounce_20ms
    btfss PORTC,7,A			    // Checa si el boton esta presionado, hasta que se deje de presionar pasa a la siguiente instruccion
	bra Disminuir_C
	
Menos_C:
    movlw 2
    subwf NUM,1,0
    movff NUM, LATB
	
Salida_Menos_C:
    btfsc PORTC,2,A
	bra Mas_Menos_C
	clrf LATB,A
	clrf LATA,A
	return
    
	

Delay_1s:
    movlw 255
    movwf VARA, 0 
    movwf VARB, 0
Loop_1:
    decfsz VARB,1,0
    goto Loop_1
    decfsz VARA,1,0
    goto Loop_1
    return
    
Debounce_20ms:
    movlw 8				// Carga variable con 1111 1111
    movwf VARA,0			// Para iniciar en el mayor valor posible
    movlw 100
    movwf VARB,0
    
Loop_20:
    decfsz VARB,1,0			// Resta 1 a la Variable2 y revisa si es cero
    goto Loop_20			// Regresa a Loop1 hasta que sea 0
    decfsz VARA,1,0			// Resta 1 a la Variable1 y revisa si es cero
    goto Loop_20			// Regresa a Loop1 hasta que sea 0
    return

//
// CONFIGURATION BITS SETTING, THIS IS REQUIRED TO CONFITURE THE OPERATION OF THE MICROCONTROLLER
// AFTER RESET. ONCE PROGRAMMED IN THIS PRACTICA THIS IS NOT NECESARY TO INCLUDE IN FUTURE PROGRAMS
// IF THIS SETTINGS ARE NOT CHANGED. SEE SECTION 26 OF DATA SHEET. 
//   
// CONFIG1L
    CONFIG  PLLSEL = PLL4X        // PLL Selection (4x clock multiplier)
    CONFIG  CFGPLLEN = OFF        // PLL Enable Configuration bit (PLL Disabled (firmware controlled))
    CONFIG  CPUDIV = NOCLKDIV     // CPU System Clock Postscaler (CPU uses system clock (no divide))
    CONFIG  LS48MHZ = SYS24X4     // Low Speed USB mode with 48 MHz system clock (System clock at 24 MHz, USB clock divider is set to 4)
// CONFIG1H
    CONFIG  FOSC = INTOSCIO       // Oscillator Selection (Internal oscillator) 
    CONFIG  PCLKEN = ON           // Primary Oscillator Shutdown (Primary oscillator enabled)
    CONFIG  FCMEN = OFF           // Fail-Safe Clock Monitor (Fail-Safe Clock Monitor disabled)
    CONFIG  IESO = OFF            // Internal/External Oscillator Switchover (Oscillator Switchover mode disabled)
// CONFIG2L
    CONFIG  nPWRTEN = OFF         // Power-up Timer Enable (Power up timer disabled)
    CONFIG  BOREN = SBORDIS       // Brown-out Reset Enable (BOR enabled in hardware (SBOREN is ignored))
    CONFIG  BORV = 190            // Brown-out Reset Voltage (BOR set to 1.9V nominal)
    CONFIG  nLPBOR = OFF          // Low-Power Brown-out Reset (Low-Power Brown-out Reset disabled)
// CONFIG2H
    CONFIG  WDTEN = OFF           // Watchdog Timer Enable bits (WDT disabled in hardware (SWDTEN ignored))
    CONFIG  WDTPS = 32768         // Watchdog Timer Postscaler (1:32768)
// CONFIG3H
    CONFIG  CCP2MX = RC1          // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
    CONFIG  PBADEN = OFF          // PORTB A/D Enable bit (PORTB<5:0> pins are configured as analog input channels on Reset)
    CONFIG  T3CMX = RC0           // Timer3 Clock Input MUX bit (T3CKI function is on RC0)
    CONFIG  SDOMX = RB3           // SDO Output MUX bit (SDO function is on RB3)
    CONFIG  MCLRE = ON            // Master Clear Reset Pin Enable (MCLR pin enabled; RE3 input disabled)
// CONFIG4L
    CONFIG  STVREN = ON           // Stack Full/Underflow Reset (Stack full/underflow will cause Reset)
    CONFIG  LVP = ON              // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled if MCLRE is also 1)
    CONFIG  ICPRT = OFF           // Dedicated In-Circuit Debug/Programming Port Enable (ICPORT disabled)
    CONFIG  XINST = OFF           // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled)
//
// DEFAULT CONFIGURATION FOR THE REST OF THE REGISTERS
//
    CONFIG  CONFIG5L = 0x0F	  // BLOCKS ARE NOT CODE-PROTECTED
    CONFIG  CONFIG5H = 0xC0	  // BOOT BLOCK IS NOT CODE-PROTECTED
    CONFIG  CONFIG6L = 0x0F	  // BLOCKS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG6H = 0xE0	  // CONFIGURATION REGISTERS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG7L = 0x0F	  // BLOCKS NOT PROTECTED FROM TABLE READS
    CONFIG  CONFIG7H = 0x40	  // BOOT BLOCK IS NOT PROTECTED FROM TABLE READS
    
end resetVec
