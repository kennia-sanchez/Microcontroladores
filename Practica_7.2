RADIX DEC
    PROCESSOR 18F45K50  //PROCESADOR CON EL QUE SE TRABAJA
    #include  "pic18f45k50.inc"
 //
 // MEMORY ALLOCATION
 //
    PSECT resetVec, class=CODE, reloc=2, abs
    ORG	    0            // IR AL ESPACIO DE MEMORIA 0 PARA COMENZAR
//
// RESET VECTOR
//
    
 //DEFINICION DE VARIABLES
 
 
#define RS LATA, 0, A   // DEFINICION DE LOS PUERTOS CON LOS QUE SE VA CONFIGURAR EL LCD
#define EN LATA, 1, A
#define Rw LATA, 2, A
#define DATALCD LATD,A //
 
 VARA EQU 0  //VARIABLES UTILIZADAS EN EL DELAY
 VARB EQU 1
 AUX1 EQU 0X30   //VARIABLE PARA ALMACENAR EL PRIMER VALOR DE LA OPERACION REALIZADA
 AUX2 EQU 0X32  //VARIABLE PARA ALMACENAR SEGUNDO VALOR
 AUX3 EQU 0X34	//CONTADOR
 AUX4 EQU 0X42	//GUARDA EL RESULTADO
    
 
    
    
RESETVEC:
    ORG	    32	    
    GOTO    Start   


Start: 
    //CONFIGURACION DE PUERTOS  
    //PUERTO A PARA LOS BITS DE CONFIUGRACION DE LCD 
    // PUERTO D PARA DATA DE LCD 
    // PUERTO B PARA TECLADO MATRICIAL 
    
    MOVLB 15   
    CLRF TRISD,0  //PUERTO D COMO SALIDA
    CLRF ANSELB,0// MODO DIGITAL DE A,B,C
    CLRF ANSELD,0
    CLRF ANSELA,0
    CLRF TRISA,A
    CLRF LATA,A
    CLRF TRISD,A
    CLRF LATD,A
    
    
    // CONFIGURACION ANTIREBOTE DE RUTINAS DE BOTOBES DE TECLADO MATRICIAL 
    BCF INTCON2,7,A                  //CONFIGURACION DE RESISTENCIAS PULL UP
    MOVLW 15              // PINS SALIDAS Y ENTRADAS DEL TECLADO MATRICIAL
    MOVWF TRISB,A                 //CONFIGURACION DE LAS ENTRADAS Y SALIDAS DEL PUERTO B
    MOVWF WPUB,A                 //ACTIVACION DE LAS RESISTENCIAS PULL UP
    
    
    // LIMPIANDO AUXILIARES
    CLRF AUX1,A
    CLRF AUX2,A
    CLRF AUX3,A
    CLRF AUX4,A
    CLRF 0X40,A 
    
    //-----------------------------------------CONFIGURACIÓN PRINCIAL DEL LCD-----------------------------------------
    //AQUI SE DEFININEN LAS CONDICIONES CON LAS QUE VA INICIAR NUESTRO LCD 
//INTERFAZ 8 BITS, DOS LINEAS Y 5X8
MOVLW 0B00111100
CALL CONFIGURACIONLCD
//ENCENDER EL DISPLAY, EL CURSOR Y EL PARPADEO
MOVLW 0B00001111 //DISPLAY ON/OFF
CALL CONFIGURACIONLCD
//INCREMENTO HACIA LA DERECHA
MOVLW 0B00000110 //ENTRY MODE SET
CALL CONFIGURACIONLCD
//LIMPIAR DISPLAY Y ENVIAR HOME
MOVLW 0B00000001 //CLEAR DISPLAY
CALL CONFIGURACIONLCD
MOVLW 0B00000010 //CURSOR HOME
CALL CONFIGURACIONLCD
MOVLW 0X80 //SET DDRAM
CALL CONFIGURACIONLCD
    
 ////////////////////////////////////////////////////////////////////////////////// VERIFICACION DE TECLAS PRESIONADAS POR EN EL TECLADO MATRICIAL////////////////////////////////////////
    
    
CHECARTECLAS:   //VAMOS CHECLANDO EL PRESIONADO DE LAS TECLAS DEL TECLADO POR RENGLONES  EN ESTA RUTINA
    MOVLW 0B01111111   
    MOVWF LATB,A
    BTFSS PORTB,3,A //SI TAL ESTA PRESIONADO NOS MOVEMOS ALA RUTINA DEL NUMERO UNO 
    GOTO UNO      //LO MISMO PARA LAS DEMAS TECLAS
    BTFSS PORTB,2,A
    GOTO DOS
    BTFSS PORTB,1,A
    GOTO TRES
    BTFSS PORTB,0,A
    GOTO LETRAA
    
    
    
    MOVLW 0B10111111 //SE VA VERFICANDO SEGUN EL RENGLON PRESIONADO Y SE VERIFICA QUE TECLA SE PRESIONO 
    MOVWF LATB,A
    BTFSS PORTB,3,A //SI TAL ESTA PRESIONADO NOS MOVEMOS A LA RUTINA DEL NUMERO DOS
		    // LO MISMO PARA LAS DEMAS TECLAS
    GOTO CUATRO
    BTFSS PORTB,2,A
    GOTO CINCO
    BTFSS PORTB,1,A
    GOTO SEIS
    BTFSS PORTB,0,A
    GOTO LETRAB
    
    MOVLW 0B11011111
    MOVWF LATB,A
    BTFSS PORTB,3,A
    GOTO SIETE
    BTFSS PORTB,2,A
    GOTO OCHO
    BTFSS PORTB,1,A
    GOTO NUEVE
    BTFSS PORTB,0,A
    GOTO LETRAC
    
    MOVLW 0B11101111
    MOVWF LATB,A
    BTFSS PORTB,3,A
    GOTO IGUAL
    BTFSS PORTB,2,A
    GOTO CERO
    BTFSS PORTB,1,A
    GOTO GATO
    BTFSS PORTB,0,A
    GOTO LETRAD
    GOTO CHECARTECLAS
    
//SUBRUTINAS TECLAS NUMERICAS//
    
UNO:
    CALL DELAY                 //RUTINA ANTIREBOTES
//SE VERFICAN QUE SIGA PRESIONADOS DEL BOTON  Y SE MANDA A LOS LEDS LOS PATRONES LATD SE HACE LO MISMO PARA LAS DISTINTAS TECLAS
    BTFSS PORTB,3,A
    BRA UNO
    MOVLW 1  // SE MANDAN LOS VALORES QUE SE IMPRIMIRAN EN LOS LEDS DE LATD / AHORA EN LUGAR DE  ENVIARSE A LOS LEDS SE ENVIAN A UN LCD DONDE EL VALOR SE GUARDA EN UNA AXULIAR QUE LLAMARA A LA RUTINA ESCRITURA Y ESTA ESCRIBIRA EL VALOR TECLEADO
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE  //LLAMADA RUTINA ESCRITURA DONDE EL NUMERO PREVIAMENTE GUARDADO SE MANDARA AL LCD 
    GOTO CHECARTECLAS  // UNA VEZ PRESIONADO CHECAMOS OTRO NUMERO
    
    // SE REALIZA EL MISMO PROCEDIMIENTO PARA LAS DEMAS TECLAS
DOS:
    CALL DELAY
    BTFSS PORTB,2,A
    BRA DOS
    MOVLW 2
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
TRES:
    CALL DELAY
    BTFSS PORTB,1,A
    BRA TRES
    MOVLW 3
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
CUATRO:
    CALL DELAY
    BTFSS PORTB,3,A
    BRA CUATRO
    MOVLW 4
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
CINCO:
    CALL DELAY
    BTFSS PORTB,2,A
    BRA CINCO
    MOVLW 5
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
SEIS:
    CALL DELAY
    BTFSS PORTB,1,A
    BRA SEIS
    MOVLW 6
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
SIETE:
    CALL DELAY
    BTFSS PORTB,3,A
    BRA SIETE
    MOVLW 7
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
OCHO:
    CALL DELAY
    BTFSS PORTB,2,A
    BRA OCHO
    MOVLW 8
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
NUEVE:
    CALL DELAY
    BTFSS PORTB,1,A
    BRA NUEVE
    MOVLW 9
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
    
CERO:
    CALL DELAY
    BTFSS PORTB,2,A
    BRA CERO
    MOVLW 0
    MOVWF AUX2,A
    ADDWF 0X40,W,A
    CALL LCDWRITE
    GOTO CHECARTECLAS
    
    
// SUBRUTINAS PARA LLAMAR A RUTINAS DE LAS OPERACIONES
LETRAA: 
    CALL DELAY 
    MOVLW '+'    //SIGNO CORRESPONDIENTE AL PRESIONADO DE LA TECLA A 
    CALL LCDWRITE
    CALL SUMA   // SE LLAMA A LA RUTINA DE SUMA 
    
    
LETRAB: 
    CALL DELAY 
    MOVLW '-' //SIGNO CORRESPONDIENTE AL PRESIONADO DE LA TECLA B
    CALL LCDWRITE
    CALL RESTA
    
LETRAC: 
    CALL DELAY
    MOVLW '*' //SIGNO CORRESPONDIENTE AL PRESIONADO DE LA TECLA C
    CALL LCDWRITE
    CALL MULTIPLICACION
    
LETRAD:
    CALL DELAY 
    MOVLW '/' //SIGNO CORRESPONDIENTE AL PRESIONADO DE LA TECLA D
    CALL LCDWRITE
    CALL DIVISION
 GATO:   // EL GATO SOLO VA BORRAR VALORES 
    CALL DELAY 
    CALL BORRAR
    
           //SUBRUTINAS OPERACIONES//
    
SUMA:
    MOVFF AUX2,AUX1 // VA A GUARDAR LO QUE SE PRESIONO AL NUEVO REGISTRO DE OPERACION
    CALL CHECARTECLAS //REVISA SI SE PRESIONO OTRO NUMERO
    MOVFF AUX2, WREG //GUARDA EL SEGUNDO NUMERO AL WREG
    ADDWF AUX1, F, A  //SE SUMA Y SE GUARDA EL RESULTADO EN EL REGISTRO 0X30
    GOTO RESULTADO  //MANDA A LLAMAR A LA RUTINA RESULTADO QUE DESPLEGARA EL RESULTADO EN LOS LEDS
    
RESTA:
    MOVFF AUX2,AUX1 // VA A GUARDAR LO QUE SE PRESIONO AL NUEVO REGISTRO DE OPERACION
    CALL CHECARTECLAS //REVISA SI SE PRESIONO OTRO NUMERO
    MOVFF AUX2, WREG //GUARDA EL SEGUNDO NUMERO AL WREG
    SUBWF AUX1, F, A //SE RESTA Y SE GUARDA EL RESULTADO EN EL REGISTRO 0X30
    BTFSC STATUS,4,A //BANDERA QUE NOS INDICA SEGUN EL REGISTRO STATUS SI HAY UN NEGATIVO SI ESTO PASA VAMOS A COMPLEMENTO A DOS PARA REPRESENTAR EL NUMERO
    GOTO COMPLEMENTO2 //RUTINA DE LLAMADA DE COMPLEMENTO A DOS 
RESULTADORESTA:
    GOTO RESULTADO  // SI NO ES NEGATIVO NOS MUESTRA EL RESULTADO EN LEDS
    
COMPLEMENTO2:
    MOVFF AUX1, WREG   // SE HACE LAS OPERACIONES TIPICA DE REPRESENTACION DE NEGATIVOS A COMPLEMENTO A 2
    COMF WREG,F,A //COMF NOS COMPLEMENTA EL REGISTRO
    ADDLW 1     //SE LE AGREGA 1 
    MOVFF WREG, AUX1 // PASA EL RESULTADO
    MOVLW '-'  // SE MODIFICO EN LUGAR DE ENCENDER UN LED ESCRIBIRA UN NEGATIVO - EN EL LCD 
    CALL LCDWRITE
    GOTO RESULTADORESTA // NOS ARROJA EL RESULTADO

MULTIPLICACION:
    MOVFF AUX2, AUX1
    CALL CHECARTECLAS
    MOVFF AUX2,WREG
    MULWF AUX1,A   // ESTA OPERACION NOS PERMITE MULTIPLICAR 2 REGISTROS
    MOVFF PRODL,AUX1 // MUESTRA EL RESULTADO EN EL REGISTRO DE 8 BITS MENOR 
    GOTO RESULTADO  // DESPLIEGA EN LOS LEDS
    
DIVISION:              ;CHECAR ESTA RUTINA DE DIVISION
    CLRF AUX3,A   // AUX3 ES UN CONTADOR 
    // EN ESTS RUTINA SE RELIZA LA DIVISION RESTANDO LOS NUMEROS ASIGNADOS Y CONTROLANDO MEDIANTE
    // UNA VARIABLE CONTADORA QUE VA ESTAR RESTANDO HASTA QUE EL NUMERO DE 0 O DE NEGATIVO PARA DE ESTA MANERA IR VIENDO CUANTAS VECES CABE
    // UN NUMERO EN OTRO Y PODER DAR CON EL RESULTADO DE LA DIVISION 
    MOVFF AUX2,AUX1
    CALL CHECARTECLAS
    MOVFF AUX2, 0X36
    MOVFF AUX2,WREG
    TSTFSZ WREG, A
    GOTO DIVISION1
    GOTO DIVCERO
    
DIVISION1:
    MOVFF 0X36,WREG
    SUBWF AUX1, F, A
TESTCERO: // NOS VERIFICA SI YA DIO CERO
    BTFSC STATUS,2,A
    GOTO ESCERO
PROBARNEG: // VERIFICA SI YA DIO NEGATIV
    BTFSC STATUS,4,A
    GOTO NEGATIVO
    CALL SUMAUNO
    GOTO DIVISION1
SUMAUNO:
    MOVLW 1
    ADDWF AUX3,F,A 
    RETURN
ESCERO: // SI ES CERO MANDA EL RESULTADO 
    CALL SUMAUNO
    MOVFF AUX3,AUX1
    GOTO RESULTADO
NEGATIVO:
    MOVFF AUX3,AUX1
    GOTO RESULTADO
DIVCERO: //SUBRUTINA QUE MUESTRA ERROR. DIVISIÓN ENTRE 0     EN ESTE CASO  MANDA UNA TEXTO AL LCD EN LUGAR DE ENCENDER LEDS
    MOVLW 'M'
    CALL LCDWRITE
    MOVLW 'A'
    CALL LCDWRITE
    MOVLW 'T'
    CALL LCDWRITE
    MOVLW 'H'
    CALL LCDWRITE
    MOVLW ' '
    CALL LCDWRITE
    MOVLW 'E'
    CALL LCDWRITE
    MOVLW 'R'
    CALL LCDWRITE
    MOVLW 'R'
    CALL LCDWRITE
    MOVLW 'O'
    CALL LCDWRITE
    MOVLW 'R'
    CALL LCDWRITE
    
    GOTO CHECARTECLAS
    

// CHECAR RUTINA DIVISION 

// SUBRUTINA BORRAR

BORRAR:
    //LIMPIAR DISPLAY Y ENVIAR HOME
    MOVLW 0B00000001 //CLEAR DISPLAY
    CALL CONFIGURACIONLCD
    
    MOVLW 0B00000010 //CURSOR HOME
    CALL CONFIGURACIONLCD
    
    MOVLW 0X80 //SET DDRAM
    CALL CONFIGURACIONLCD
   
    GOTO CHECARTECLAS
    
// SUBRUTINA IGUAL

IGUAL:
   CALL DELAY //RUTINA DE REBOTE PRESIONADO BOTON IGUAL  // AL PRESIONAR EL IGUAL SE NOS MOSTRARA EL SIMBOLO EN LA PRIMERA LINEA Y MANDA OTRA DIRECCION PARA QUE DESPLIEUGE EL RESULTADP EN LA 2DA
   MOVLW '='
   CALL LCDWRITE
   MOVLW 0XC0 
   CALL CONFIGURACIONLCD
   RETURN
RESULTADO:
    CALL CONVERTIR  // RUTINA QUE NOS PERMITE CONVERTIR LOS VALORES OBTENIDOS DE LOS RESULTADO  Y ENVIARLOS AL LCD
    MOVFF 0X36, WREG //SE MUEVE AL REGISTRO DE TRABAJO
    ADDWF 0X40,W,A // VARIABLE DONDE SE GUARDAN VALORES QUE SE DEPSLIEGAN LCD
    CALL LCDWRITE
    MOVFF 0X30,WREG //UNIDADES DESPLEGADAS AQUI
    ADDWF 0X40,W,A
    CALL LCDWRITE
BORRADO: // NOS REVISA SI SE PRESIONO EL BOTON DE CLEAR
    MOVLW 0B11101111
    MOVWF LATB, A
    BTFSS PORTB,1,A
    GOTO GATO
    GOTO BORRADO
    

    
    
CONVERTIR: //SUBRUTINA PARA DECENAS Y UNIDADES
    CLRF 0X36,A //Limpia el contador
RESTANDO: //PROCESO POR EL QUE SE VA RESTNADO DE 10 EN 10 PARA SABER CUANTAS DECENAS EXISTEN EN EL NUMERO
    MOVLW 10
    SUBWF AUX1,F,A //VAMOS RESTANDO 10 
    BTFSC STATUS,4,A //SE VERFICA SI ES NEGATIVO PARA VER SI SE DIO CON LAS DECENAS
    GOTO UNIDADES	   //SI NOS DA NEGATIVO SIGNIFICA QUE SOLO QUEDAN LAS UNIDAD3ES 
    GOTO SUMAD
SUMAD: //SUMA AL CONTADOR LAS DECENAS
    INCF 0X36,F,A
    GOTO RESTANDO
UNIDADES: //Solo quedan las unidades 
    MOVLW 10 //Se regresan las unidades que se restaron
    ADDWF AUX1,F,A
    RETURN


    
 //CONFIGURACION DE LCD Y RUTINAS DE ESCRITURA LECTURA Y BUSY FLAG DEL LCD
CONFIGURACIONLCD: //SUBRUTINA DE INSTRUCCIONES DE LCD PARA CONFIGURACIÓN
//CALL LCDOCUPADO //CHECAR SI EL LCD ESTÁ OCUPADO
BCF RS //RS Y RW = 0
BCF Rw
BSF EN //SE ACTIVA EL ENABLE
MOVWF DATALCD //ESCRIBE EN EL LCD
NOP
BCF EN //SE DESACTIVA EL ENABLE
//CALL LCDOCUPADO //CHECAR SI EL LCD ESTÁ OCUPADO
RETURN




LCDWRITE: //SUBRUTINA DE INSTRUCCIONES DE LCD PARA ESCRIBIR
//CALL LCDOCUPADO //CHECAR SI EL LCD ESTÁ OCUPADO
BCF Rw
BSF RS
BSF EN //SE ACTIVA EL ENABLE
MOVWF DATALCD //ESCRIBE EL EL LCD
NOP
BCF EN //SE DESACTIVA EL ENABLE
//CALL LCDOCUPADO //CHECAR SI EL LCD ESTÁ OCUPADO
RETURN
    
    
LECTURA:
BCF RS //CONFIGURACIÓN PARA LEER EL LCD
BSF Rw //RS = 0 - RW = 1
BSF EN //ACTIVA EL ENABLE
MOVFF PORTD,0X50 //LEE LOS BITS DEL LCD
NOP
BCF EN //DESACTIVA EL ENABLE
BTFSC 0X50,7,A //CHECA SI EL BUSY FLAG ESTÁ ACTIVADA
GOTO LECTURA //SI ESTA ACTIVADA QUE VUELVA A CHECAR
CLRF ANSELD,A //SI NO ESTÁ ACTIVADA CONFIGURA EL LCD COMO SALIDA
CLRF TRISD,A
CLRF LATD,A
NOP
BCF EN
RETURN
    
    
    

// RUTINA DELAY

DELAY:
    MOVLW 255
    MOVWF VARA,0
    MOVWF VARB,0
    //REVISION DE PAUSA 
LOOP:
    DECFSZ VARB,1,0
    GOTO LOOP
    DECFSZ VARA,1,0
    GOTO LOOP
    RETURN

    
    
;    LETRAA:
;    CALL DELAY
;    BTFSS PORTB,0
;    BRA LETRAA
;    MOVLW 0b00110011
;    MOVWF LATD,A
;    RETURN
;    
;    LETRAB:
;    CALL DELAY
;    BTFSS PORTB,1
;    BRA LETRAB
;    MOVLW 0b00101100
;    MOVWF LATD,A
;    GOTO CHECARTECLAS
;    
;    LETRAC:
;    CALL DELAY
;    BTFSS PORTB,2
;    BRA LETRAC
;    MOVLW 0b00111000
;    MOVWF LATD,A
;    GOTO CHECARTECLAS
;    
;    LETRAD:
;    CALL DELAY
;    BTFSS PORTB,3
;    BRA LETRAD
;    MOVLW 0b01011011
;    MOVWF LATD,A
;    GOTO CHECARTECLAS

    
    
    

  
    
    
    
// CONFIGURATION BITS SETTING, THIS IS REQUIRED TO CONFITURE THE OPERATION OF THE MICROCONTROLLER
// AFTER RESET. ONCE PROGRAMMED IN THIS PRACTICA THIS IS NOT NECESARY TO INCLUDE IN FUTURE PROGRAMS
// IF THIS SETTINGS ARE NOT CHANGED. SEE SECTION 26 OF DATA SHEET. 
//   
// CONFIG1L
    CONFIG  PLLSEL = PLL4X        // PLL Selection (4x clock multiplier)
    CONFIG  CFGPLLEN = OFF        // PLL Enable Configuration bit (PLL Disabled (firmware controlled))
    CONFIG  CPUDIV = NOCLKDIV     // CPU System Clock Postscaler (CPU uses system clock (no divide))
    CONFIG  LS48MHZ = SYS24X4     // Low Speed USB mode with 48 MHz system clock (System clock at 24 MHz, USB clock divider is set to 4)
// CONFIG1H
    CONFIG  FOSC = INTOSCIO       // Oscillator Selection (Internal oscillator) 
    CONFIG  PCLKEN = ON           // Primary Oscillator Shutdown (Primary oscillator enabled)
    CONFIG  FCMEN = OFF           // Fail-Safe Clock Monitor (Fail-Safe Clock Monitor disabled)
    CONFIG  IESO = OFF            // Internal/External Oscillator Switchover (Oscillator Switchover mode disabled)
// CONFIG2L
    CONFIG  nPWRTEN = OFF         // Power-up Timer Enable (Power up timer disabled)
    CONFIG  BOREN = SBORDIS       // Brown-out Reset Enable (BOR enabled in hardware (SBOREN is ignored))
    CONFIG  BORV = 190            // Brown-out Reset Voltage (BOR set to 1.9V nominal)
    CONFIG  nLPBOR = OFF          // Low-Power Brown-out Reset (Low-Power Brown-out Reset disabled)
// CONFIG2H
    CONFIG  WDTEN = OFF           // Watchdog Timer Enable bits (WDT disabled in hardware (SWDTEN ignored))
    CONFIG  WDTPS = 32768         // Watchdog Timer Postscaler (1:32768)
// CONFIG3H
    CONFIG  CCP2MX = RC1          // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
    CONFIG  PBADEN = OFF          // PORTB A/D Enable bit (PORTB<5:0> pins are configured as analog input channels on Reset)
    CONFIG  T3CMX = RC0           // Timer3 Clock Input MUX bit (T3CKI function is on RC0)
    CONFIG  SDOMX = RB3           // SDO Output MUX bit (SDO function is on RB3)
    CONFIG  MCLRE = ON            // Master Clear Reset Pin Enable (MCLR pin enabled; RE3 input disabled)
// CONFIG4L
    CONFIG  STVREN = ON           // Stack Full/Underflow Reset (Stack full/underflow will cause Reset)
    CONFIG  LVP = ON              // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled if MCLRE is also 1)
    CONFIG  ICPRT = OFF           // Dedicated In-Circuit Debug/Programming Port Enable (ICPORT disabled)
    CONFIG  XINST = OFF           // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled)
//
// DEFAULT CONFIGURATION FOR THE REST OF THE REGISTERS
//
    CONFIG  CONFIG5L = 0x0F	  // BLOCKS ARE NOT CODE-PROTECTED
    CONFIG  CONFIG5H = 0xC0	  // BOOT BLOCK IS NOT CODE-PROTECTED
    CONFIG  CONFIG6L = 0x0F	  // BLOCKS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG6H = 0xE0	  // CONFIGURATION REGISTERS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG7L = 0x0F	  // BLOCKS NOT PROTECTED FROM TABLE READS
    CONFIG  CONFIG7H = 0x40	  // BOOT BLOCK IS NOT PROTECTED FROM TABLE READS

    
end Start
