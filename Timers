// Escribe  un  programa  que  utilizando  el  TIMER0,  permita  a  un  LED  parpadear  a  5  diferentes 
// velocidades: 50ms, 250ms, 500ms, 1000ms y el tiempo máximo disponible en el TIMER0. 
    
// El  tiempo  indicado  es  lo  que  dura  el  LED  ya  sea  encendido  o  apagado  y  debe  permanecer 
// parpadeando a dicha velocidad hasta que se seleccione otra distinta. Utiliza botones para cambiar 
// entre cada uno de los tiempos configurados. 


RADIX     DEC              	    //Seleccionar decimal como base numÈrica
PROCESSOR 18F45K50	            //Seleccionar procesador a utilizar
#include  "pic18f45k50.inc"	    //Incluir librerÌas de PIC18F45K50
    
// Memory Allocation

  PSECT resetVec, class=CODE, reloc=2, abs
  ORG	  0	    //Ir al espacio e memoria 0 para comenzar 

// Reset Vector

resetVec:  
    ORG   32	       
    GOTO  Start  
    
Start:
    movlb 15
    
   
    clrf TRISA,A      // leds para saber si entra a la rutina
    clrf TRISD,A      // leds
    setf TRISC,A      // botones 0,1,2,6,7
    clrf LATD,A
    clrf LATA,A
    

    Checar_Botones:
        btfsc PORTC,0,A
	    bra Checar1
	    call Rutina_A
	 
    Checar1:
	btfsc PORTC,1,A
	    bra Checar2
	    call Rutina_B

    Checar2:
	btfsc PORTC,2,A
	    bra Checar3
	    call Rutina_C
	    
    Checar3:
	btfsc PORTC,3,A
	    bra Checar4
	    call Rutina_D
	    
    Checar4:
	btfsc PORTC,4,A
	    bra Checar_Botones
	    call Rutina_E
	    
	    
    // 50ms
    Rutina_A:
	call Config_A		    // Configuración del tiempo
	Rutina_AA:
	    movlw 61		    // Valor inicial del timer
	    movwf TMR0L,A	    // Lo el valor al timer
	    bsf T0CON,7,A	    // Enciende el timer
	Led_A:
	    btfss INTCON,2,A	    // Revisa bandera de interrupción
		bra Led_A
		btg LATD,0,A	 
		bcf INTCON,2,A	    // Apaga bandera de interrupción
		//bra Rutina_AA
		return
	
    // 250ms
    Rutina_B:
	call Config_B
	Rutina_BB:
	    movlw 12
	    movwf TMR0L,A
	    bsf T0CON,7,A
	Led_B:
	    btfss INTCON,2,A
		bra Led_B
		btg LATD,0,A
		bcf INTCON,2,A
		//bra Rutina_BB
		return
	
    // 500ms
    Rutina_C:
	call Config_C
	Rutina_CC:
	    movlw 220		    // Valor inicial del timer (LOW)
	    movwf TMR0L,A
	    movlw 11		    // Valor inicial del timer (HIGH)
	    movwf TMR0H,A
	    bsf T0CON,7,A	    // Enciende el timer
	Led_C:
	    btfss INTCON,2,A
		bra Led_C
		btg LATD,0,A
		bcf INTCON,2,1
		//bra Rutina_CC
		return
	
		
    // 1000ms
    Rutina_D:
	call Config_D
	Rutina_DD:
	    movlw 220		    // Valor inicial del timer (LOW)
	    movwf TMR0L,A
	    movlw 11		    // Valor inicial del timer (HIGH)
	    movwf TMR0H,A
	    bsf T0CON,7,A	    // Enciende el timer
	Led_D:
	    btfss INTCON,2,A
		bra Led_D
		btg LATD,0,A
		bcf INTCON,2,1
		//bra Rutina_DD
		return

    
    // Tiempo Maximo
    Rutina_E:
	call Config_E
	Rutina_EE:
	    movlw 0		    // Valor inicial del timer (LOW)
	    movwf TMR0L,A
	    movlw 0		    // Valor inicial del timer (HIGH)
	    movwf TMR0H,A
	    bsf T0CON,7,A	    // Enciende el timer
	Led_E:
	    btfss INTCON,2,A
		bra Led_E
		btg LATD,0,A
		bcf INTCON,2,1
		//bra Rutina_EE
		return


    
    Config_A:		    // 8 bits preescalador 1:64
	movlw 0b01000101
	movwf T0CON,A
	return
	
    Config_B:		    // 8 bits preescalador 1:256
	movlw 0b01000111
	movwf T0CON,A
	return
	
    Config_C:		    // 16 bits preescalador 1:2
	movlw 0b00000000
	movwf T0CON,A
	return

    Config_D:		    // 16 bits preescalador 1:4
	movlw 0b00000001
	movwf T0CON,A
	return
	
    Config_E:		    // 16 bits preescalador 1:256
	movlw 0b00000111
	movwf T0CON,A
	return
	
//
// CONFIGURATION BITS SETTING, THIS IS REQUIRED TO CONFITURE THE OPERATION OF THE MICROCONTROLLER
// AFTER RESET. ONCE PROGRAMMED IN THIS PRACTICA THIS IS NOT NECESARY TO INCLUDE IN FUTURE PROGRAMS
// IF THIS SETTINGS ARE NOT CHANGED. SEE SECTION 26 OF DATA SHEET. 
//   
// CONFIG1L
    CONFIG  PLLSEL = PLL4X        // PLL Selection (4x clock multiplier)
    CONFIG  CFGPLLEN = OFF        // PLL Enable Configuration bit (PLL Disabled (firmware controlled))
    CONFIG  CPUDIV = NOCLKDIV     // CPU System Clock Postscaler (CPU uses system clock (no divide))
    CONFIG  LS48MHZ = SYS24X4     // Low Speed USB mode with 48 MHz system clock (System clock at 24 MHz, USB clock divider is set to 4)
// CONFIG1H
    CONFIG  FOSC = INTOSCIO       // Oscillator Selection (Internal oscillator) 
    CONFIG  PCLKEN = ON           // Primary Oscillator Shutdown (Primary oscillator enabled)
    CONFIG  FCMEN = OFF           // Fail-Safe Clock Monitor (Fail-Safe Clock Monitor disabled)
    CONFIG  IESO = OFF            // Internal/External Oscillator Switchover (Oscillator Switchover mode disabled)
// CONFIG2L
    CONFIG  nPWRTEN = OFF         // Power-up Timer Enable (Power up timer disabled)
    CONFIG  BOREN = SBORDIS       // Brown-out Reset Enable (BOR enabled in hardware (SBOREN is ignored))
    CONFIG  BORV = 190            // Brown-out Reset Voltage (BOR set to 1.9V nominal)
    CONFIG  nLPBOR = OFF          // Low-Power Brown-out Reset (Low-Power Brown-out Reset disabled)
// CONFIG2H
    CONFIG  WDTEN = OFF           // Watchdog Timer Enable bits (WDT disabled in hardware (SWDTEN ignored))
    CONFIG  WDTPS = 32768         // Watchdog Timer Postscaler (1:32768)
// CONFIG3H
    CONFIG  CCP2MX = RC1          // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
    CONFIG  PBADEN = OFF          // PORTB A/D Enable bit (PORTB<5:0> pins are configured as analog input channels on Reset)
    CONFIG  T3CMX = RC0           // Timer3 Clock Input MUX bit (T3CKI function is on RC0)
    CONFIG  SDOMX = RB3           // SDO Output MUX bit (SDO function is on RB3)
    CONFIG  MCLRE = ON            // Master Clear Reset Pin Enable (MCLR pin enabled; RE3 input disabled)
// CONFIG4L
    CONFIG  STVREN = ON           // Stack Full/Underflow Reset (Stack full/underflow will cause Reset)
    CONFIG  LVP = ON              // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled if MCLRE is also 1)
    CONFIG  ICPRT = OFF           // Dedicated In-Circuit Debug/Programming Port Enable (ICPORT disabled)
    CONFIG  XINST = OFF           // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled)
//
// DEFAULT CONFIGURATION FOR THE REST OF THE REGISTERS
//
    CONFIG  CONFIG5L = 0x0F	  // BLOCKS ARE NOT CODE-PROTECTED
    CONFIG  CONFIG5H = 0xC0	  // BOOT BLOCK IS NOT CODE-PROTECTED
    CONFIG  CONFIG6L = 0x0F	  // BLOCKS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG6H = 0xE0	  // CONFIGURATION REGISTERS NOT PROTECTED FROM WRITING
    CONFIG  CONFIG7L = 0x0F	  // BLOCKS NOT PROTECTED FROM TABLE READS
    CONFIG  CONFIG7H = 0x40	  // BOOT BLOCK IS NOT PROTECTED FROM TABLE READS
    
    
END resetVec



